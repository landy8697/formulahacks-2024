import { CreatedUser, UserMetadata } from "../user";
export declare type UsersQuery = {
    pageSize?: number;
    pageNumber?: number;
    orderBy?: "CREATED_AT_ASC" | "CREATED_AT_DESC" | "LAST_ACTIVE_AT_ASC" | "LAST_ACTIVE_AT_DESC" | "EMAIL" | "USERNAME";
    emailOrUsername?: string;
    includeOrgs?: boolean;
};
export declare type UsersPagedResponse = {
    users: UserMetadata[];
    totalUsers: number;
    currentPage: number;
    pageSize: number;
    hasMoreResults: boolean;
};
export declare type UsersInOrgQuery = {
    orgId: string;
    pageSize?: number;
    pageNumber?: number;
    includeOrgs?: boolean;
};
export declare function fetchUserMetadataByQuery(authUrl: URL, integrationApiKey: string, pathParam: string, query: any): Promise<UserMetadata | null>;
export declare function fetchUserMetadataByUserIdWithIdCheck(authUrl: URL, integrationApiKey: string, userId: string, includeOrgs?: boolean): Promise<UserMetadata | null>;
export declare function fetchUsersByQuery(authUrl: URL, integrationApiKey: string, query: UsersQuery): Promise<UsersPagedResponse>;
export declare function fetchUsersInOrg(authUrl: URL, integrationApiKey: string, query: UsersInOrgQuery): Promise<UsersPagedResponse>;
export declare function fetchBatchUserMetadata(authUrl: URL, integrationApiKey: string, type: string, values: string[], keyFunction: (x: UserMetadata) => string, includeOrgs?: boolean): Promise<{
    [key: string]: UserMetadata;
}>;
export declare type CreateUserRequest = {
    email: string;
    emailConfirmed?: boolean;
    sendEmailToConfirmEmailAddress?: boolean;
    password?: string;
    askUserToUpdatePasswordOnLogin?: boolean;
    username?: string;
    firstName?: string;
    lastName?: string;
    properties?: {
        [key: string]: any;
    };
};
export declare function createUser(authUrl: URL, integrationApiKey: string, createUserRequest: CreateUserRequest): Promise<CreatedUser>;
export declare function disableUser(authUrl: URL, integrationApiKey: string, userId: string): Promise<boolean>;
export declare function enableUser(authUrl: URL, integrationApiKey: string, userId: string): Promise<boolean>;
export declare function disableUser2fa(authUrl: URL, integrationApiKey: string, userId: string): Promise<boolean>;
export declare type InviteUserToOrgRequest = {
    orgId: string;
    email: string;
    role: string;
};
export declare function inviteUserToOrg(authUrl: URL, integrationApiKey: string, inviteUserToOrgRequest: InviteUserToOrgRequest): Promise<boolean>;
export declare type UpdateUserMetadataRequest = {
    username?: string;
    firstName?: string;
    lastName?: string;
    pictureUrl?: string;
    metadata?: {
        [key: string]: any;
    };
    properties?: {
        [key: string]: any;
    };
    updatePasswordRequired?: boolean;
};
export declare function updateUserMetadata(authUrl: URL, integrationApiKey: string, userId: string, updateUserMetadataRequest: UpdateUserMetadataRequest): Promise<boolean>;
export declare type UpdateUserEmailRequest = {
    newEmail: string;
    requireEmailConfirmation: boolean;
};
export declare function updateUserEmail(authUrl: URL, integrationApiKey: string, userId: string, updateUserEmail: UpdateUserEmailRequest): Promise<boolean>;
export declare type UpdateUserPasswordRequest = {
    password: string;
    askUserToUpdatePasswordOnLogin?: boolean;
};
export declare function updateUserPassword(authUrl: URL, integrationApiKey: string, userId: string, updateUserPasswordRequest: UpdateUserPasswordRequest): Promise<boolean>;
export declare function enableUserCanCreateOrgs(authUrl: URL, integrationApiKey: string, userId: string): Promise<boolean>;
export declare function disableUserCanCreateOrgs(authUrl: URL, integrationApiKey: string, userId: string): Promise<boolean>;
export declare function clearUserPassword(authUrl: URL, integrationApiKey: string, userId: string): Promise<boolean>;
export declare function deleteUser(authUrl: URL, integrationApiKey: string, userId: string): Promise<boolean>;
export declare type UserSignupQueryParams = {
    userSignupQueryParameters: {
        [key: string]: string;
    };
};
export declare function fetchUserSignupQueryParams(authUrl: URL, integrationApiKey: string, userId: string): Promise<UserSignupQueryParams | null>;
