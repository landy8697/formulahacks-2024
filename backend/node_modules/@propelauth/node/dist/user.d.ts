import { InternalLoginMethod, LoginMethod } from "./loginMethod";
export declare type UserProperties = {
    [key: string]: unknown;
};
export declare type User = {
    userId: string;
    orgIdToOrgMemberInfo?: OrgIdToOrgMemberInfo;
    email: string;
    firstName?: string;
    lastName?: string;
    username?: string;
    legacyUserId?: string;
    impersonatorUserId?: string;
    metadata?: {
        [key: string]: any;
    };
    properties?: UserProperties;
    loginMethod: LoginMethod;
};
export declare class UserClass {
    userId: string;
    orgIdToUserOrgInfo?: {
        [orgId: string]: OrgMemberInfo;
    };
    email: string;
    firstName?: string;
    lastName?: string;
    username?: string;
    properties?: UserProperties;
    loginMethod: LoginMethod;
    legacyUserId?: string;
    impersonatorUserId?: string;
    constructor(user: User);
    getOrg(orgId: string): OrgMemberInfo | undefined;
    getOrgByName(orgName: string): OrgMemberInfo | undefined;
    getUserProperty(key: string): unknown | undefined;
    getOrgs(): OrgMemberInfo[];
    isImpersonating(): boolean;
    isRole(orgId: string, role: string): boolean;
    isAtLeastRole(orgId: string, role: string): boolean;
    hasPermission(orgId: string, permission: string): boolean;
    hasAllPermissions(orgId: string, permissions: string[]): boolean;
    static fromUser(user: User): UserClass;
}
export declare type Org = {
    orgId: string;
    name: string;
    maxUsers?: number;
    isSamlConfigured: boolean;
    metadata: {
        [key: string]: any;
    };
};
export declare type CreatedOrg = {
    orgId: string;
    name: string;
};
export declare type CreatedUser = {
    userId: string;
};
export declare type UserMetadata = {
    userId: string;
    email: string;
    emailConfirmed: boolean;
    hasPassword: boolean;
    username?: string;
    firstName?: string;
    lastName?: string;
    pictureUrl?: string;
    locked: boolean;
    enabled: boolean;
    mfaEnabled: boolean;
    canCreateOrgs: boolean;
    createdAt: number;
    lastActiveAt: number;
    orgIdToOrgInfo?: OrgIdToOrgMemberInfo;
    legacyUserId?: string;
    impersonatorUserId?: string;
    metadata?: {
        [key: string]: any;
    };
    properties?: {
        [key: string]: unknown;
    };
};
export declare class OrgMemberInfo {
    readonly orgId: string;
    readonly orgName: string;
    readonly orgMetadata: {
        [key: string]: unknown;
    };
    readonly urlSafeOrgName: string;
    private readonly userAssignedRole;
    private readonly userInheritedRolesPlusCurrentRole;
    private readonly userPermissions;
    constructor(orgId: string, orgName: string, orgMetadata: {
        [key: string]: any;
    }, urlSafeOrgName: string, userAssignedRole: string, userInheritedRolesPlusCurrentRole: string[], userPermissions: string[]);
    get assignedRole(): string;
    get permissions(): string[];
    get inheritedRolesPlusCurrentRole(): string[];
    isRole(role: string): boolean;
    isAtLeastRole(role: string): boolean;
    hasPermission(permission: string): boolean;
    hasAllPermissions(permissions: string[]): boolean;
    static fromJSON(json: string): OrgMemberInfo;
}
export declare type UserAndOrgMemberInfo = {
    user: User;
    orgMemberInfo: OrgMemberInfo;
};
export declare type OrgIdToOrgMemberInfo = {
    [orgId: string]: OrgMemberInfo;
};
export declare type InternalOrgMemberInfo = {
    org_id: string;
    org_name: string;
    org_metadata: {
        [key: string]: any;
    };
    url_safe_org_name: string;
    user_role: string;
    inherited_user_roles_plus_current_role: string[];
    user_permissions: string[];
};
export declare type InternalUser = {
    user_id: string;
    org_id_to_org_member_info?: {
        [org_id: string]: InternalOrgMemberInfo;
    };
    email: string;
    first_name?: string;
    last_name?: string;
    username?: string;
    metadata?: {
        [key: string]: any;
    };
    properties?: {
        [key: string]: unknown;
    };
    login_method?: InternalLoginMethod;
    legacy_user_id?: string;
    impersonator_user_id?: string;
};
export declare function toUser(snake_case: InternalUser): User;
export declare function toOrgIdToOrgMemberInfo(snake_case?: {
    [org_id: string]: InternalOrgMemberInfo;
}): OrgIdToOrgMemberInfo | undefined;
export declare type ApiKeyNew = {
    apiKeyId: string;
    apiKeyToken: string;
};
export declare type ApiKeyFull = {
    apiKeyId: string;
    createdAt: number;
    expiresAtSeconds: number;
    metadata: {
        [key: string]: any;
    };
    userId: string;
    orgId: string;
};
export declare type ApiKeyResultPage = {
    apiKeys: ApiKeyFull[];
    totalApiKeys: number;
    currentPage: number;
    pageSize: number;
    hasMoreResults: boolean;
};
export declare type ApiKeyValidation = {
    metadata?: {
        [key: string]: any;
    };
    user?: UserMetadata;
    org?: Org;
    userInOrg?: OrgMemberInfo;
};
export declare type PersonalApiKeyValidation = {
    metadata?: {
        [key: string]: any;
    };
    user: UserMetadata;
};
export declare type OrgApiKeyValidation = {
    metadata?: {
        [key: string]: any;
    };
    org: Org;
    user?: UserMetadata;
    userInOrg?: OrgMemberInfo;
};
