import { AccessToken, CreateAccessTokenRequest } from "./api/accessToken";
import { ApiKeysCreateRequest, ApiKeysQueryRequest, ApiKeyUpdateRequest } from "./api/endUserApiKeys";
import { CreateMagicLinkRequest, MagicLink } from "./api/magicLink";
import { MigrateUserFromExternalSourceRequest } from "./api/migrateUser";
import { AddUserToOrgRequest, ChangeUserRoleInOrgRequest, CreateOrgRequest, OrgQuery, OrgQueryResponse, RemoveUserFromOrgRequest, UpdateOrgRequest } from "./api/org";
import { TokenVerificationMetadata } from "./api/tokenVerificationMetadata";
import { CreateUserRequest, InviteUserToOrgRequest, UpdateUserEmailRequest, UpdateUserMetadataRequest, UpdateUserPasswordRequest, UserSignupQueryParams, UsersInOrgQuery, UsersPagedResponse, UsersQuery } from "./api/user";
import { ApiKeyFull, ApiKeyNew, ApiKeyResultPage, ApiKeyValidation, CreatedOrg, CreatedUser, Org, OrgApiKeyValidation, PersonalApiKeyValidation, User, UserAndOrgMemberInfo, UserMetadata } from "./user";
export declare type BaseAuthOptions = {
    authUrl: string;
    apiKey: string;
    /**
     * By default, this library performs a one-time fetch on startup for
     *   token verification metadata from your authUrl using your apiKey.
     *
     * This is usually preferred to make sure you have the most up to date information,
     *   however, in environments like serverless, this one-time fetch becomes a
     *   per-request fetch.
     *
     * In those environments, you can specify the token verification metadata manually,
     *   which you can obtain from your PropelAuth project.
     */
    manualTokenVerificationMetadata?: TokenVerificationMetadata;
};
export declare function initBaseAuth(opts: BaseAuthOptions): {
    validateAccessTokenAndGetUser: (authorizationHeader?: string | undefined) => Promise<User>;
    validateAccessTokenAndGetUserWithOrgInfo: (authorizationHeader: string | undefined, requiredOrgInfo: RequiredOrgInfo) => Promise<UserAndOrgMemberInfo>;
    validateAccessTokenAndGetUserWithOrgInfoWithMinimumRole: (authorizationHeader: string | undefined, requiredOrgInfo: RequiredOrgInfo, minimumRole: string) => Promise<UserAndOrgMemberInfo>;
    validateAccessTokenAndGetUserWithOrgInfoWithExactRole: (authorizationHeader: string | undefined, requiredOrgInfo: RequiredOrgInfo, exactRole: string) => Promise<UserAndOrgMemberInfo>;
    validateAccessTokenAndGetUserWithOrgInfoWithPermission: (authorizationHeader: string | undefined, requiredOrgInfo: RequiredOrgInfo, permission: string) => Promise<UserAndOrgMemberInfo>;
    validateAccessTokenAndGetUserWithOrgInfoWithAllPermissions: (authorizationHeader: string | undefined, requiredOrgInfo: RequiredOrgInfo, permissions: string[]) => Promise<UserAndOrgMemberInfo>;
    fetchUserMetadataByUserId: (userId: string, includeOrgs?: boolean | undefined) => Promise<UserMetadata | null>;
    fetchUserMetadataByEmail: (email: string, includeOrgs?: boolean | undefined) => Promise<UserMetadata | null>;
    fetchUserMetadataByUsername: (username: string, includeOrgs?: boolean | undefined) => Promise<UserMetadata | null>;
    fetchUserSignupQueryParams: (userId: string) => Promise<UserSignupQueryParams | null>;
    fetchBatchUserMetadataByUserIds: (userIds: string[], includeOrgs?: boolean | undefined) => Promise<{
        [userId: string]: UserMetadata;
    }>;
    fetchBatchUserMetadataByEmails: (emails: string[], includeOrgs?: boolean | undefined) => Promise<{
        [email: string]: UserMetadata;
    }>;
    fetchBatchUserMetadataByUsernames: (usernames: string[], includeOrgs?: boolean | undefined) => Promise<{
        [username: string]: UserMetadata;
    }>;
    fetchOrg: (orgId: string) => Promise<Org | null>;
    fetchOrgByQuery: (orgQuery: OrgQuery) => Promise<OrgQueryResponse>;
    fetchUsersByQuery: (usersQuery: UsersQuery) => Promise<UsersPagedResponse>;
    fetchUsersInOrg: (usersInOrgQuery: UsersInOrgQuery) => Promise<UsersPagedResponse>;
    createUser: (createUserRequest: CreateUserRequest) => Promise<CreatedUser>;
    clearUserPassword: (userId: string) => Promise<boolean>;
    updateUserMetadata: (userId: string, updateUserMetadataRequest: UpdateUserMetadataRequest) => Promise<boolean>;
    updateUserEmail: (userId: string, updateUserEmailRequest: UpdateUserEmailRequest) => Promise<boolean>;
    updateUserPassword: (userId: string, updateUserPasswordRequest: UpdateUserPasswordRequest) => Promise<boolean>;
    createMagicLink: (createMagicLinkRequest: CreateMagicLinkRequest) => Promise<MagicLink>;
    createAccessToken: (createAccessTokenRequest: CreateAccessTokenRequest) => Promise<AccessToken>;
    migrateUserFromExternalSource: (migrateUserFromExternalSourceRequest: MigrateUserFromExternalSourceRequest) => Promise<User>;
    deleteUser: (userId: string) => Promise<boolean>;
    disableUser: (userId: string) => Promise<boolean>;
    enableUser: (userId: string) => Promise<boolean>;
    disableUser2fa: (userId: string) => Promise<boolean>;
    enableUserCanCreateOrgs: (userId: string) => Promise<boolean>;
    disableUserCanCreateOrgs: (userId: string) => Promise<boolean>;
    createOrg: (createOrgRequest: CreateOrgRequest) => Promise<CreatedOrg>;
    addUserToOrg: (addUserToOrgRequest: AddUserToOrgRequest) => Promise<boolean>;
    changeUserRoleInOrg: (changeUserRoleInOrgRequest: ChangeUserRoleInOrgRequest) => Promise<boolean>;
    removeUserFromOrg: (removeUserFromOrgRequest: RemoveUserFromOrgRequest) => Promise<boolean>;
    updateOrg: (updateOrgRequest: UpdateOrgRequest) => Promise<boolean>;
    deleteOrg: (orgId: string) => Promise<boolean>;
    allowOrgToSetupSamlConnection: (orgId: string) => Promise<boolean>;
    disallowOrgToSetupSamlConnection: (orgId: string) => Promise<boolean>;
    inviteUserToOrg: (inviteUserToOrgRequest: InviteUserToOrgRequest) => Promise<boolean>;
    fetchApiKey: (apiKeyId: string) => Promise<ApiKeyFull>;
    fetchCurrentApiKeys: (apiKeyQuery: ApiKeysQueryRequest) => Promise<ApiKeyResultPage>;
    fetchArchivedApiKeys: (apiKeyQuery: ApiKeysQueryRequest) => Promise<ApiKeyResultPage>;
    createApiKey: (apiKeyCreate: ApiKeysCreateRequest) => Promise<ApiKeyNew>;
    updateApiKey: (apiKeyId: string, ApiKeyUpdate: ApiKeyUpdateRequest) => Promise<boolean>;
    deleteApiKey: (apiKeyId: string) => Promise<boolean>;
    validateApiKey: (apiKeyToken: string) => Promise<ApiKeyValidation>;
    validatePersonalApiKey: (apiKeyToken: string) => Promise<PersonalApiKeyValidation>;
    validateOrgApiKey: (apiKeyToken: string) => Promise<OrgApiKeyValidation>;
};
export declare type RequiredOrgInfo = {
    orgId?: string;
    orgName?: string;
};
export declare type HandleErrorOptions = {
    logError?: boolean;
    returnDetailedErrorToUser?: boolean;
};
export declare type HandleErrorResponse = {
    status: number;
    message: string;
};
export declare function handleError(e: unknown, opts?: HandleErrorOptions): HandleErrorResponse;
